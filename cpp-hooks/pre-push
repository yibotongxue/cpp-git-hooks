#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

rm build/CMakeCache.txt
cmake -S . -B build -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

# 获取所有要推送的文件
# 这里我们假设推送的修改会涉及 .cpp, .h, .hpp, .cc 文件
files_to_check=$(git diff --cached --name-only --diff-filter=ACM "*.cpp" "*.h" "*.hpp" "*.cc")

# 如果没有要检查的文件，直接退出
if [ -z "$files_to_check" ]; then
    exit 0
fi

# 遍历文件并执行 clang-tidy 检查
for file in $files_to_check
do
    # 执行 clang-tidy 检查，并使用 compile_commands.json
    clang-tidy "$file" -p=$REPO_ROOT/build/compile_commands.json -fix

    # 检查 clang-tidy 是否成功执行
    if [ $? -ne 0 ]; then
        echo "clang-tidy failed on $file. Aborting push."
        exit 1
    fi
done

# 如果检查通过，允许推送
exit 0
